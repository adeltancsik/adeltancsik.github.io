@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/*
  0 - 600px:      Phone
  600 - 900px:    Tablet portrait
  900 - 1200px:   Tablet landscape
  [1200 - 1800] is where the normal styles apply
  1800px + :      Big desktop
  
  $breakpoint argument choices:
  - phone
  - tab-port (tablet portrait)
  - tab-land (tablet landscape)
  - big-desktop
  
  ORDER: Base + typography > general layout + grid > page layout > components
  */
@mixin respond($breakpoint) {
  // if directive
  @if $breakpoint == phone {
    // em and rem in the media queries are not effected by the root font-size, but
    // they depend on the font-size setted in the browser (which is 16px by default ->
    // 1em = 16px in media queries by default)
    // -> so when the user changes it, it also effects the media query, which we want to happen
    @media only screen and (max-width: 37.5em) {
      //600px
      // this 'content' allows us to pass a block of code into the mixin
      @content;
    }
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      //900px
      @content;
    }
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      //1200px
      @content;
    }
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      //1800px
      @content;
    }
  }
  @if $breakpoint == short {
    @media only screen and (min-aspect-ratio: 16/7) {
      @content;
    }
  }
  @if $breakpoint == xshort {
    @media only screen and (min-aspect-ratio: 16/6) {
      @content;
    }
  }
}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
  @media screen and (orientation: #{$orientation}) {
    @content;
  }
}

@mixin gradient-background(
  $tint: false,
  $opacity: 0.25,
  $stop1: 30%,
  $stop2: 55%,
  $angle: 55deg
) {
  $background-image: (
    url("../images/overlay.png"),
    linear-gradient(
      $angle,
      transparentize(#f5f4f8, (1 - $opacity)) $stop1,
      transparentize($color-pink, (1 - $opacity)) $stop2,
      transparentize($color-blue-light, (1 - $opacity))
    )
  );

  $background-size: (128px 128px, auto);

  @if ($tint) {
    $x: linear-gradient(0deg, rgba(0, 0, 0, 0.125), rgba(0, 0, 0, 0.125));
    $y: auto;
    $background-image: append($background-image, $x);
    $background-size: append($background-size, $y);
  }

  background-image: $background-image;
  background-size: $background-size;
}
